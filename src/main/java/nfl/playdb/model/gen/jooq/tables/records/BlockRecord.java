/**
 * This class is generated by jOOQ
 */
package nfl.playdb.model.gen.jooq.tables.records;


import javax.annotation.Generated;

import nfl.playdb.model.gen.jooq.tables.Block;

import org.jooq.Field;
import org.jooq.Record3;
import org.jooq.Row3;
import org.jooq.impl.TableRecordImpl;


/**
 * Blocked Punts, Field Goal Attempts, etc.
 */
@Generated(
	value = {
		"http://www.jooq.org",
		"jOOQ version:3.6.2"
	},
	comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class BlockRecord extends TableRecordImpl<BlockRecord> implements Record3<Integer, String, String> {

	private static final long serialVersionUID = 1224769683;

	/**
	 * Setter for <code>nfl_plays.block.pid</code>.
	 */
	public void setPid(Integer value) {
		setValue(0, value);
	}

	/**
	 * Getter for <code>nfl_plays.block.pid</code>.
	 */
	public Integer getPid() {
		return (Integer) getValue(0);
	}

	/**
	 * Setter for <code>nfl_plays.block.blk</code>.
	 */
	public void setBlk(String value) {
		setValue(1, value);
	}

	/**
	 * Getter for <code>nfl_plays.block.blk</code>.
	 */
	public String getBlk() {
		return (String) getValue(1);
	}

	/**
	 * Setter for <code>nfl_plays.block.brcv</code>.
	 */
	public void setBrcv(String value) {
		setValue(2, value);
	}

	/**
	 * Getter for <code>nfl_plays.block.brcv</code>.
	 */
	public String getBrcv() {
		return (String) getValue(2);
	}

	// -------------------------------------------------------------------------
	// Record3 type implementation
	// -------------------------------------------------------------------------

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Row3<Integer, String, String> fieldsRow() {
		return (Row3) super.fieldsRow();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Row3<Integer, String, String> valuesRow() {
		return (Row3) super.valuesRow();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<Integer> field1() {
		return Block.BLOCK.PID;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<String> field2() {
		return Block.BLOCK.BLK;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<String> field3() {
		return Block.BLOCK.BRCV;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Integer value1() {
		return getPid();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public String value2() {
		return getBlk();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public String value3() {
		return getBrcv();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public BlockRecord value1(Integer value) {
		setPid(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public BlockRecord value2(String value) {
		setBlk(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public BlockRecord value3(String value) {
		setBrcv(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public BlockRecord values(Integer value1, String value2, String value3) {
		value1(value1);
		value2(value2);
		value3(value3);
		return this;
	}

	// -------------------------------------------------------------------------
	// Constructors
	// -------------------------------------------------------------------------

	/**
	 * Create a detached BlockRecord
	 */
	public BlockRecord() {
		super(Block.BLOCK);
	}

	/**
	 * Create a detached, initialised BlockRecord
	 */
	public BlockRecord(Integer pid, String blk, String brcv) {
		super(Block.BLOCK);

		setValue(0, pid);
		setValue(1, blk);
		setValue(2, brcv);
	}
}
