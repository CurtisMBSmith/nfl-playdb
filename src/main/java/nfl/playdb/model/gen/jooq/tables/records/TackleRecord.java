/**
 * This class is generated by jOOQ
 */
package nfl.playdb.model.gen.jooq.tables.records;


import java.math.BigDecimal;

import javax.annotation.Generated;

import nfl.playdb.model.gen.jooq.tables.Tackle;

import org.jooq.Field;
import org.jooq.Record4;
import org.jooq.Row4;
import org.jooq.impl.TableRecordImpl;


/**
 * Special teams tackles are not counted (ie, kickoffs, punts)
 */
@Generated(
	value = {
		"http://www.jooq.org",
		"jOOQ version:3.6.2"
	},
	comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TackleRecord extends TableRecordImpl<TackleRecord> implements Record4<Integer, Integer, String, BigDecimal> {

	private static final long serialVersionUID = -670525957;

	/**
	 * Setter for <code>nfl_plays.tackle.uid</code>.
	 */
	public void setUid(Integer value) {
		setValue(0, value);
	}

	/**
	 * Getter for <code>nfl_plays.tackle.uid</code>.
	 */
	public Integer getUid() {
		return (Integer) getValue(0);
	}

	/**
	 * Setter for <code>nfl_plays.tackle.pid</code>.
	 */
	public void setPid(Integer value) {
		setValue(1, value);
	}

	/**
	 * Getter for <code>nfl_plays.tackle.pid</code>.
	 */
	public Integer getPid() {
		return (Integer) getValue(1);
	}

	/**
	 * Setter for <code>nfl_plays.tackle.tck</code>.
	 */
	public void setTck(String value) {
		setValue(2, value);
	}

	/**
	 * Getter for <code>nfl_plays.tackle.tck</code>.
	 */
	public String getTck() {
		return (String) getValue(2);
	}

	/**
	 * Setter for <code>nfl_plays.tackle.value</code>.
	 */
	public void setValue(BigDecimal value) {
		setValue(3, value);
	}

	/**
	 * Getter for <code>nfl_plays.tackle.value</code>.
	 */
	public BigDecimal getValue() {
		return (BigDecimal) getValue(3);
	}

	// -------------------------------------------------------------------------
	// Record4 type implementation
	// -------------------------------------------------------------------------

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Row4<Integer, Integer, String, BigDecimal> fieldsRow() {
		return (Row4) super.fieldsRow();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Row4<Integer, Integer, String, BigDecimal> valuesRow() {
		return (Row4) super.valuesRow();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<Integer> field1() {
		return Tackle.TACKLE.UID;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<Integer> field2() {
		return Tackle.TACKLE.PID;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<String> field3() {
		return Tackle.TACKLE.TCK;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<BigDecimal> field4() {
		return Tackle.TACKLE.VALUE;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Integer value1() {
		return getUid();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Integer value2() {
		return getPid();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public String value3() {
		return getTck();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public BigDecimal value4() {
		return getValue();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public TackleRecord value1(Integer value) {
		setUid(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public TackleRecord value2(Integer value) {
		setPid(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public TackleRecord value3(String value) {
		setTck(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public TackleRecord value4(BigDecimal value) {
		setValue(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public TackleRecord values(Integer value1, Integer value2, String value3, BigDecimal value4) {
		value1(value1);
		value2(value2);
		value3(value3);
		value4(value4);
		return this;
	}

	// -------------------------------------------------------------------------
	// Constructors
	// -------------------------------------------------------------------------

	/**
	 * Create a detached TackleRecord
	 */
	public TackleRecord() {
		super(Tackle.TACKLE);
	}

	/**
	 * Create a detached, initialised TackleRecord
	 */
	public TackleRecord(Integer uid, Integer pid, String tck, BigDecimal value) {
		super(Tackle.TACKLE);

		setValue(0, uid);
		setValue(1, pid);
		setValue(2, tck);
		setValue(3, value);
	}
}
